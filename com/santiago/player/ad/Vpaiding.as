package com.santiago.player.ad{	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.media.SoundTransform;	import flash.events.*;	import flash.net.sendToURL;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.external.ExternalInterface;	import flash.display.Loader;	//add	import flash.system.Security;	import flash.system.LoaderContext;	import flash.system.SecurityDomain;	import flash.display.*;	import flash.geom.Rectangle;	import flash.utils.Timer;	import com.santiago.player.*;		public class Vpaiding extends MovieClip {				/**视频地址*/		protected var adUrl:String = "";		protected var loader:Loader;		/**时间轴的对象引用，用于发送事件给前帖模块*/		protected var rootStage:MovieClip;		/**广告宽*/		protected var mediaWidth:int;		/**广告高*/		protected var mediaHeight:int;				/**视频加载成功标识*/		public var vDownLoadSucceed:Boolean = false;				private const VPAID_VERSION:String = "2.0";		private var _ad:Object;		private var _adVPAIDVersion:String;		private var _adStartRequested:Boolean = false;				public function Vpaiding( rootStage:MovieClip )		{			this.rootStage = rootStage;			trace("rootStage dimension: "+rootStage.width+"//"+rootStage.height);		}		/**		 * 设置广告的参数，并开始加载广告		 * */		public function setAdParameter( url:String,mediaWid:int,mediaHei:int ):void		{			this.adUrl = url;			this.mediaWidth = mediaWid;			this.mediaHeight = mediaHei;			//trace("videoUrl: "+adUrl);			init();		}						public function dispose():void		{						if( loader )			{				loader.contentLoaderInfo.removeEventListener(Event.COMPLETE,onLoadComplete);				loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);				if( loader.parent )loader.parent.removeChild( loader );				try{					loader.unloadAndStop();				}catch(e:Error){};			}			rootStage = null;			trace("销毁前贴片......");		}		protected function init(event:Event=null):void		{			loader = new Loader();			this.addChild( loader );						//loader.x = ( stage.stageWidth - this.mediaWidth )/2;			//loader.y = ( stage.stageHeight - this.mediaHeight )/2;			loader.x = loader.y = 0;						loader.contentLoaderInfo.addEventListener( Event.COMPLETE, onLoadComplete );			loader.contentLoaderInfo.addEventListener( IOErrorEvent.IO_ERROR, ioErrorHandler );						loader.load( new URLRequest( this.adUrl ));		}		protected function ioErrorHandler( event:Event ):void		{			trace("media加载出错..");			this.rootStage.dispatchEvent( new Event("ADV_PLAY_OVER") );		}				protected function onLoadComplete( event:Event ):void		{							trace("media加载完成..");			//handshakeVersion			this.vDownLoadSucceed = true;						_ad = loader.content; //获取VPAID对象			processAd();					}				 private function processAd():void        {	            if (_ad)            {                if (_ad.hasOwnProperty("handshakeVersion"))                {						/*step０:在这里VPAID首先获取handshakeVersion,确保版本统一*/                    _adVPAIDVersion = _ad.handshakeVersion(VPAID_VERSION);					                }                				/*				这里按照你们的需要, 加上各种所需的VPAID事件监听，一切按照iab的文档上面内容来写；				*/				                                if (_ad.hasOwnProperty("initAd"))                {						/*step1:在这里VPAID首先初始化*/                    //_ad.initAd(stage.stageWidth - 40, stage.stageHeight - 40, "normal", 4800, "", "");					_ad.initAd(rootStage.width, rootStage.height, "normal", 4800, "", "");									}								//VPAID eventlistner				_ad.addEventListener("AdLoaded",onAdLoadedHandler);				_ad.addEventListener("AdStarted",onAdStartedHandler);				_ad.addEventListener("AdStopped",onAdStoppedHandler);								_ad.addEventListener("AdLinearChange",onAdLinearChangeHandler);				_ad.addEventListener("AdExpandedChange",onAdExpandedChangeHandler);				_ad.addEventListener("AdRemainingTimeChange",onAdRemainingTimeChangeHandler);				_ad.addEventListener("AdVolumeChange",onAdVolumeChangeHandler);				_ad.addEventListener("AdImpression",onAdImpressionHandler);								_ad.addEventListener("AdVideoStart",onAdVideoStartHandler);				_ad.addEventListener("AdVideoFirstQuartile",onAdVideoFirstQuarHandler);				_ad.addEventListener("AdVideoMidpoint",onAdVideoMidHandler);				_ad.addEventListener("AdVideoThirdQuartile",onAdVideoThirdQuarHandler);				_ad.addEventListener("AdVideoComplete",onAdVideoCompleteHandler);								_ad.addEventListener("AdClickThru",onAdClickThruHandler);				_ad.addEventListener("AdUserAcceptInvitation",onAdUserAcceptInvHandler);				_ad.addEventListener("AdUserMinimize",onAdUserMiniHandler);				_ad.addEventListener("AdUserClose",onAdUserCloseHandler);				_ad.addEventListener("AdPaused",onAdPausedHandler);				_ad.addEventListener("AdPlaying",onAdPlayingHandler);				_ad.addEventListener("AdLog",onAdLogHandler);				_ad.addEventListener("AdError",onAdErrorHandler);            }        }				//Handlers for VPAID eventlistner		private function onAdLoadedHandler(event:Event):void{            Log("PLAYER >> ADLOADED");            startAd();			rootStage.dispatchEvent(new ActionEvent(ActionEvent.ADLOADED));        	}		private function onAdStartedHandler(event:Event):void{			Log("===AdStarted!!===")			rootStage.dispatchEvent(new ActionEvent(ActionEvent.ADSTARTED));			}		private function onAdStoppedHandler(event:Event):void{			Log("===AdStopped!!===")			rootStage.dispatchEvent(new ActionEvent(ActionEvent.ADSTOPPED));			}					private function onAdLinearChangeHandler(event:Event):void{			Log("===AdLinearChange!!===")			rootStage.dispatchEvent(new ActionEvent(ActionEvent.ADLINEARCHANGE));			}		private function onAdExpandedChangeHandler(event:Event):void{			Log("===AdExpandedChange!!===")			rootStage.dispatchEvent(new ActionEvent(ActionEvent.ADEXPANDEDCHANGE));			}		private function onAdRemainingTimeChangeHandler(event:Event):void{			Log("===AdRemainingTimeChange!!===")			Log(_ad.adRemainingTime.toString());			rootStage.dispatchEvent(new ActionEvent(ActionEvent.ADREMAININGTIMECHANGE));			}		private function onAdVolumeChangeHandler(event:Event):void{			Log("===AdVolumeChange!!===");			Log(_ad.adVolume.toString());			rootStage.dispatchEvent(new ActionEvent(ActionEvent.ADVOLUMECHANGE));			}		private function onAdImpressionHandler(event:Event):void{			Log("===AdImpression!!===")			rootStage.dispatchEvent(new ActionEvent(ActionEvent.ADIMPRESSION));			}				private function onAdVideoStartHandler(event:Event):void{			Log("===AdVideoStart!!===")			rootStage.dispatchEvent(new ActionEvent(ActionEvent.ADVIDEOSTART));			}		private function onAdVideoFirstQuarHandler(event:Event):void{			Log("===AdVideoFirstQuartile!!===")			rootStage.dispatchEvent(new ActionEvent(ActionEvent.ADVIDEOFIRSTQUARTILE));			}		private function onAdVideoMidHandler(event:Event):void{			Log("===AdVideoMidpoint!!===")			rootStage.dispatchEvent(new ActionEvent(ActionEvent.ADVIDEOMIDPOINT));			}		private function onAdVideoThirdQuarHandler(event:Event):void{			Log("===AdVideoThirdQuartile!!===")			rootStage.dispatchEvent(new ActionEvent(ActionEvent.ADVIDEOTHIRDQUARTILE));			}		private function onAdVideoCompleteHandler(event:Event):void{			Log("===AdVideoComplete!!===")			rootStage.dispatchEvent(new ActionEvent(ActionEvent.ADVIDEOCOMPLETE));			}					private function onAdClickThruHandler(event:Event):void{			Log("===AdClickThru!!===")			rootStage.dispatchEvent(new ActionEvent(ActionEvent.ADCLICKTHRU));			}		private function onAdUserAcceptInvHandler(event:Event):void{			Log("===AdUserAcceptInvitation!!===")			rootStage.dispatchEvent(new ActionEvent(ActionEvent.ADUSERACCEPTINVITATION));			}		private function onAdUserMiniHandler(event:Event):void{			Log("===AdUserMinize!!===")			rootStage.dispatchEvent(new ActionEvent(ActionEvent.ADUSERMINIMIZE));			}		private function onAdUserCloseHandler(event:Event):void{			Log("===AdUserClose!!===")			rootStage.dispatchEvent(new ActionEvent(ActionEvent.ADUSERCLOSE));			}		private function onAdPausedHandler(event:Event):void{			Log("===AdPaused!!===")			rootStage.dispatchEvent(new ActionEvent(ActionEvent.ADPAUSED));			}		private function onAdPlayingHandler(event:Event):void{			Log("===AdPlaying!!===")			rootStage.dispatchEvent(new ActionEvent(ActionEvent.ADPLAYING));			}		private function onAdLogHandler(event:Event):void{			Log("===AdLog!!===")			rootStage.dispatchEvent(new ActionEvent(ActionEvent.ADLOG));			}		private function onAdErrorHandler(event:Event):void{			Log("===AdError!!===")			rootStage.dispatchEvent(new ActionEvent(ActionEvent.ADERROR));			}				//Realize Functions for IVPAID		private function startAd():void        {            if (!_adStartRequested)            {                //_ad.x = 0;                //_ad.y = 0;                //addChild(_ad as DisplayObject);                _adStartRequested = true;                				/*step2:在这里VPAID首先Start*/				_ad.startAd();								var _timer:Timer = new Timer(3000,1);				_timer.addEventListener(TimerEvent.TIMER,function(){_ad.startAd();})				_timer.start();            }        }		public function get adVolume():Number{return _ad.adVolume;}		public function set adVolume(vol:Number):void{_ad.adVolume=vol;}						public function Log(log:String):void{			trace(log);						ExternalInterface.call("console.log", log);			}			}	}