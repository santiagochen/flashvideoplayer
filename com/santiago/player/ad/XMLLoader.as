package com.santiago.player.ad{    import flash.events.*;    import flash.net.*;    public class XMLLoader extends EventDispatcher {				public var xml:XML;		        private var loader:URLLoader;                public function XMLLoader() 		{                   }				public function load( url:String ):void		{			loader = new URLLoader();            configureListeners(loader);            var request:URLRequest = new URLRequest( url );            try {                loader.load(request);            } catch (error:Error) {                trace("Unable to load requested document.");            }		}				public function dispose():void		{			try{ 				loader.close();			}catch(e:Error){};			loader.removeEventListener(Event.COMPLETE, completeHandler);            loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);            loader.removeEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			xml = null;			loader = null;		}        private function configureListeners(dispatcher:IEventDispatcher):void		{            dispatcher.addEventListener(Event.COMPLETE, completeHandler);            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);        }		        private function completeHandler(event:Event):void		{            var loader:URLLoader = URLLoader(event.target);            trace("completeHandler... " );			xml = new XML( loader.data );			this.dispatchEvent( new Event( Event.COMPLETE ) );        }        private function securityErrorHandler(event:SecurityErrorEvent):void		{            trace("securityErrorHandler: " + event);			this.dispatchEvent( new ErrorEvent( ErrorEvent.ERROR ) );        }        private function ioErrorHandler(event:IOErrorEvent):void 		{            trace("ioErrorHandler: " + event);			this.dispatchEvent( new ErrorEvent( ErrorEvent.ERROR ) );        }    }}