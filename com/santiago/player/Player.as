/** Plyaer* Volume is 8 as default* Santiago Chen*/package com.santiago.player {	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.media.Video;	import flash.display.Sprite;	import flash.net.URLRequest;	import flash.events.AsyncErrorEvent;	import flash.events.NetStatusEvent;	import flash.display.MovieClip;	import flash.events.SecurityErrorEvent;	import flash.external.ExternalInterface;	import flash.media.SoundTransform;	import flash.events.Event;	import flash.display.Stage;	import flash.display.StageDisplayState;	import com.santiago.player.*;	import flash.events.ErrorEvent;	import flash.display.DisplayObject;	import com.santiago.player.ad.Vpaiding;	import com.santiago.player.ad.XMLLoader;	import com.santiago.Loading;	import flash.display.Loader;		public class Player extends MovieClip{				//params for video		private var nc:NetConnection; 		private var ns:NetStream;		private var vid:Video;				private var st:SoundTransform = new SoundTransform();		private var volcache:Number = 8;		private var duration:int;		private var videoWidth:int;		private var videoHeight:int;		private var status:String;				private var playerW:Number;		private var playerH:Number;		private var playerAutoplay:Boolean;		private var togglepause:Boolean = false;		private var vidlist:Array = new Array;		private var vidbase:MovieClip =  new MovieClip;		private var videomask:Sprite = new Sprite;		private var nonlinearloader:Loader;				private var isplaylist:Boolean = false;		private var vidview:View;		private var inputbtn:InputBtn;		private var loading:Loading = new Loading;				//ad param		private var vpad:Vpaiding		private var xmlLoader:XMLLoader;		/**广告地址*/		private var adlist:Array = new Array;				/**what you get广告地址*/		private var adMediaObj:Object = new Object();		/**检测代码*/		private var detect_url:String ;				private var _this:MovieClip;				private var _defaultvid:String; //this is only for VPAID				public function Player(width:Number=550,height:Number=400,autoplay:Boolean=false,defaultvid:String=null){			_this = this;						playerW = width;			playerH = height;			playerAutoplay = autoplay;			_defaultvid = defaultvid;						nc = new NetConnection();			nc.connect(null);						ns = new NetStream(nc);			ns.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR,asyncErrorHandler);						//vid view			vidview = new View(playerW,playerH);			this.addChild(vidview);						vidview.addEventListener(ActionEvent.MUTECLICK, onMuteHandler);			vidview.addEventListener(ActionEvent.STOPCLICK, onStopHandler);			vidview.addEventListener(ActionEvent.TOGGLECLICK, onToggleHandler);			vidview.addEventListener(ActionEvent.FSCLICK, onFSHandler);			vidview.addEventListener(ActionEvent.PLAYLISTCLICK, onPLHandler);						this.addEventListener(ActionEvent.WITHPLAYLIST, onWithPlayList);						// inputbtn			inputbtn = new InputBtn(playerH*.045,playerH*.045,20);						inputbtn.x = playerW*.15;			inputbtn.y = playerH*.948;			inputbtn.isAsync= true;			inputbtn.placeholder = "请输入前贴片链接";			inputbtn.waitmes = "提交中......";			inputbtn.successmes = "提交成功......";			this.addChild(inputbtn);			inputbtn.ClickSubmit = function(data:*):void{								showloading();				if(_this.getChildByName("nonlinear")){					_this.removeChild(nonlinearloader);				}							if(vidlist.length>0) emptyArr(vidlist);				if(adlist.length>0) emptyArr(adlist);				if(_defaultvid) vidlist.push(_defaultvid);				if(data) adlist.push(data.toString());								if(adlist.length>=1){					if(vpad) _this.gc();					//ad parts					vpad = new Vpaiding(vidbase);					_this.addChild( vpad );										xmlLoader = new XMLLoader();					xmlLoader.addEventListener( Event.COMPLETE,onXmlLoader );					xmlLoader.addEventListener(ErrorEvent.ERROR,onXmlError );					xmlLoader.load( adlist[0]);					}				else{					if(playerAutoplay) this.Play();					}								}									//vidbase			vidbase.graphics.beginFill(0x000000,1);			vidbase.graphics.drawRect(0,0,playerW,playerH*.94);			vidbase.graphics.endFill();			this.addChild(vidbase);						/*vid*/			vid = new Video(playerW,playerH*.94);			this.addChild(vid);			vid.attachNetStream(ns);			vid.smoothing = true;						//videomask			videomask.graphics.beginFill(0x000000,1);			videomask.graphics.drawRect(0,0,vidbase.width,vidbase.height);			videomask.graphics.endFill();						//listen for VPAID Events			vidbase.addEventListener(ActionEvent.ADLOADED, onAdLoaded);			vidbase.addEventListener(ActionEvent.ADSTARTED, onAdStarted);			vidbase.addEventListener(ActionEvent.ADVIDEOCOMPLETE, onAdVideoComplete);			vidbase.addEventListener(ActionEvent.ADUSERCLOSE,onAdUserClose);		}				public function loadsource(seed:Object):void{			showloading();						if(this.getChildByName("nonlinear")){				//Log("we should remove it!!!!!")				this.removeChild(nonlinearloader);				}						if(vidlist.length>0) emptyArr(vidlist);			if(adlist.length>0) emptyArr(adlist);			if(seed.videopath) vidlist.push(seed.videopath);			if(seed.adpath) adlist.push(seed.adpath);									if(adlist.length>=1){				if(vpad) this.gc();				//ad parts				vpad = new Vpaiding(vidbase);				this.addChild( vpad );								xmlLoader = new XMLLoader();				xmlLoader.addEventListener( Event.COMPLETE,onXmlLoader );				xmlLoader.addEventListener(ErrorEvent.ERROR,onXmlError );				xmlLoader.load( adlist[0]);				}			else{				if(playerAutoplay) this.Play();				}						}				private function showloading(){			if(ns.bytesTotal>0){ ns.close(); vid.clear();}			if(vpad){this.gc()}			this.addChild(loading);			loading.x = (vidbase.width-180)/2;			loading.y = (vidbase.height-180)/2;			}		private function hideloading(){			this.removeChild(loading);			}				private function asyncErrorHandler(event:AsyncErrorEvent):void{			//omit the error;			}		private function netStatusHandler(event:NetStatusEvent):void{			status = event.info.code;			trace(event.info.code);			/*if(event.info.code=="NetStream.Play.Start"){}*/			if(event.info.code == "NetStream.Play.Stop"){				if(vidlist.length>0){					vidlist.pop();					ns.play(vidlist[(vidlist.length-1)].toString());					}				}		}				public function Play():void{			if(adlist.length==0){								if(ns.bytesTotal>0){ns.close();vid.clear();}								if(vidlist.length>0) {					ns.play(vidlist[(vidlist.length-1)].toString());					}				st.volume = volcache;				ns.soundTransform = st;				//vidview.dispatchEvent(new ActionEvent(ActionEvent.AUTOMOVIESTART));				vidview.dispatchEvent(new ActionEvent(ActionEvent.CONTENTREADYPLAY,'video'));								hideloading();				}									}				public function Stop():void		{			this.Log('Stop');			ns.close();			vid.clear();		}				//mute handler is OK now.		public function Mute(identifier:Boolean):void		{				if(identifier){				st.volume = 0;				ns.soundTransform = st;				vpad.adVolume = 0;				}			else{				trace("mute is good equel 2: "+identifier);				st.volume = volcache;				ns.soundTransform = st;				vpad.adVolume = volcache*0.1;				}		}				/**/public function Fullscreen(stage:Stage):Boolean		{			//this.Log('Fullscreen: ' + !(stage.displayState == StageDisplayState.FULL_SCREEN));			if (stage.displayState == StageDisplayState.FULL_SCREEN)			{				stage.displayState = StageDisplayState.NORMAL;				return false;			}			else			{				stage.displayState = StageDisplayState.FULL_SCREEN;				return true;			}		}				/*we may use it in the future*/		public function Seek(point:int):void		{			//this.Log('Seek: ' + point.toString());			//ns.seek(point);		}				/*we may use it in the future*/		private function Info(){			//var playing:Number = ns ? (ns.time / duration).toFixed(2) : 0;			//return {'width': videoWidth, 'height': videoHeight, 'total': ns ? ns.bytesTotal : 0, 'loaded': ns ? ns.bytesLoaded : 0, 'progress': ns ? (ns.bytesLoaded / ns.bytesTotal).toFixed(2) : 0, 'duration': duration, 'time': ns ? ns.time : 0, 'playing': (playing > 1 ? 1 : playing), 'status': status};			}						public function Log(log:String):void{			trace(log);			ExternalInterface.call("console.log", log);			}						////customeevents		private function onWithPlayList(event:ActionEvent):void{			this.vidview.dispatchEvent(new ActionEvent(ActionEvent.RESPONSEPLAYLIST));			}		public function onPLHandler(event:ActionEvent=null):void{			isplaylist = event.data;			this.dispatchEvent(new ActionEvent(ActionEvent.NOTIFIER,isplaylist));			}		private function onMuteHandler(event:ActionEvent):void{			this.Mute(event.data);			}		private function onToggleHandler(event:ActionEvent):void{			//trace(event.data);			if(ns.bytesTotal==0){				ns.play(vidlist[0]);				st.volume = volcache;				ns.soundTransform = st;				vidview.dispatchEvent(new ActionEvent(ActionEvent.CONTENTREADYPLAY,'video'));				}			else{				if(event.data == true){ ns.resume();}				else{ns.pause();}				}			}		private function onStopHandler(event:ActionEvent):void{			//trace("stop")			this.Stop();			}		private function onFSHandler(event:ActionEvent):void{			this.Fullscreen(stage);			}				////setter and getter		public function set volume(volume:int):void{			this.volcache = volume;			st.volume = volcache;			ns.soundTransform = st;			}		public function get volume():int{			return this.volcache;			}		public function get plstatus():Boolean{			return this.isplaylist;			}				///ad handler		private function onXmlLoader( event:Event ):void		{			Log( "Real VPAID xml文件成功下载，进行解析ing" );			try{								/*case1 vast*/				/*case2 vpaid ==>@1linear,@2nonlinear, @3both*/				adMediaObj.adsystem = xmlLoader.xml.Ad[0].InLine.AdSystem;				adMediaObj.adtitle = xmlLoader.xml.Ad[0].InLine.AdTitle;				adMediaObj.description = xmlLoader.xml.Ad[0].InLine.Description;				adMediaObj.impression = xmlLoader.xml.Ad[0].InLine.Impression;				adMediaObj.adid = xmlLoader.xml.Ad[0].InLine.Creatives.Creative.@AdID;								//var isvpaid:Boolean = (xmlLoader.xml.Ad[0].InLine.Creatives.Creative.Linear.TrackingEvents==undefined);				var islinear:Boolean = (xmlLoader.xml.Ad[0].InLine.Creatives.Creative.NonLinearAds==undefined);				var adtype:String = xmlLoader.xml.Ad[0].InLine.Creatives.Creative.Linear.MediaFiles.MediaFile.@type.toString();				//Linear!				if(islinear){					//trace("Linear!!!");					if(adtype=="application/x-shockwave-flash"){						Log("VPAID!!!!");						//if Linear:						if(xmlLoader.xml.Ad[0].Creatives.Creative.Linear!==""){							adMediaObj.duration = xmlLoader.xml.Ad[0].InLine.Creatives.Creative.Linear.Duration;							adMediaObj.adwidth = xmlLoader.xml.Ad[0].InLine.Creatives.Creative.Linear.MediaFiles.MediaFile.@width;							adMediaObj.adheight = xmlLoader.xml.Ad[0].InLine.Creatives.Creative.Linear.MediaFiles.MediaFile.@height;							adMediaObj.adurl = xmlLoader.xml.Ad[0].InLine.Creatives.Creative.Linear.MediaFiles.MediaFile; 							}												vpad.setAdParameter(adMediaObj.adurl,int(adMediaObj.adwidth),int(adMediaObj.adheight) );						this.addChild(videomask);						vpad.mask = videomask;						Log("adMediaObj.adurl: "+adMediaObj.adurl);						}					//if VAST					else{						trace("TRUELY VAST!!!!");						adMediaObj.vasttrackings = xmlLoader.xml.Ad[0].InLine.Creatives.Creative.Linear.TrackingEvents;						adMediaObj.clickthrough = xmlLoader.xml.Ad[0].InLine.Creatives.Creative.Linear.VideoClicks.ClickThrough;						adMediaObj.duration = xmlLoader.xml.Ad[0].InLine.Creatives.Creative.Linear.Duration;						adMediaObj.adwidth = xmlLoader.xml.Ad[0].InLine.Creatives.Creative.Linear.MediaFiles.MediaFile.@width;						adMediaObj.adheight = xmlLoader.xml.Ad[0].InLine.Creatives.Creative.Linear.MediaFiles.MediaFile.@height;						adMediaObj.adurl = xmlLoader.xml.Ad[0].InLine.Creatives.Creative.Linear.MediaFiles.MediaFile; 												vidlist.push(adMediaObj.adurl); //played in the way of video;						if(adlist.length>0) emptyArr(adlist);						this.Play();						}					}				//NonLinear!				else{					//NonLinear!					trace("NonLinear!!!")					if(xmlLoader.xml.Ad[0].Creatives.Creative.NonLinearAds!==undefined){						adMediaObj.noncreativetype = xmlLoader.xml.Ad[0].InLine.Creatives.Creative.NonLinearAds.NonLinear.StaticResource[0].@creativeType;						//creativeType="application/x-shockwave-flash"						var statiresource:* = xmlLoader.xml.Ad[0].InLine.Creatives.Creative.NonLinearAds.NonLinear.StaticResource[0];												var subxmlLoader:XMLLoader = new XMLLoader();						subxmlLoader.addEventListener( Event.COMPLETE,function(event){														adMediaObj.nonlinearurl = subxmlLoader.xml.Resources.resource.@URL;														if(adlist.length>0) emptyArr(adlist);														_this.Play();														nonlinearloader = new Loader();														nonlinearloader.name= "nonlinear";														nonlinearloader.load(new URLRequest(adMediaObj.nonlinearurl));														nonlinearloader.contentLoaderInfo.addEventListener(Event.COMPLETE,function(){																								  _this.addChild(nonlinearloader);																								  nonlinearloader.x=(vidbase.width-nonlinearloader.width)*.5;																								  nonlinearloader.y=vidbase.height-nonlinearloader.height;																								  })													  });						subxmlLoader.addEventListener(ErrorEvent.ERROR,onXmlError );												var _targeturl:String;						if(adMediaObj.noncreativetype=="application/x-shockwave-flash"){							_targeturl = analyzeUrl(statiresource[0],"adData").toString();							subxmlLoader.load(_targeturl);							}						else{							_targeturl = statiresource.toString();							if(adlist.length>0) emptyArr(adlist);							_this.Play();							nonlinearloader = new Loader();							nonlinearloader.name= "nonlinear";							nonlinearloader.load(new URLRequest(_targeturl));							nonlinearloader.contentLoaderInfo.addEventListener(Event.COMPLETE,function(){																	  _this.addChild(nonlinearloader);																	  nonlinearloader.x=(vidbase.width-nonlinearloader.width)*.5;																	  nonlinearloader.y=vidbase.height-nonlinearloader.height;																	  })							}												subxmlLoader.load(_targeturl);												adMediaObj.nonlinearwidth = xmlLoader.xml.Ad[0].InLine.Creatives.Creative.NonLinearAds.NonLinear.@width;						adMediaObj.nonlinearexpandwidth = xmlLoader.xml.Ad[0].InLine.Creatives.Creative.NonLinearAds.NonLinear.@expandedWidth;						adMediaObj.nonlinearheight = xmlLoader.xml.Ad[0].InLine.Creatives.Creative.NonLinearAds.NonLinear.@height;						adMediaObj.nonlinearexpandheight = xmlLoader.xml.Ad[0].InLine.Creatives.Creative.NonLinearAds.NonLinear.@expandedHeight;												}					}							}catch( e:Error ){				trace("解析xml的过程中 出现问题了");				this.dispatchEvent( new Event("ADV_PLAY_OVER") );				this.gc();			}					}				private function onXmlError( event:ErrorEvent ):void		{			trace("加载xml出现错误..");			this.dispatchEvent( new Event("ADV_PLAY_OVER") );			this.gc();		}				/**		*delete		*/		private function gc():void		{						if( vpad )vpad.dispose();			if( xmlLoader )			{				xmlLoader.removeEventListener( Event.COMPLETE,onXmlLoader );				xmlLoader.removeEventListener(ErrorEvent.ERROR,onXmlError );				xmlLoader.dispose();				xmlLoader = null;			}					}				//Handlers for dealing with VPAID Events		private function onAdLoaded(event:ActionEvent):void{			vpad.adVolume = volcache*0.1;			}		private function onAdStarted(event:ActionEvent):void{			vidview.dispatchEvent(new ActionEvent(ActionEvent.CONTENTREADYPLAY,"ad"));			hideloading();			inputbtn.SubmitSuccess();			//vidview.dispatchEvent(new ActionEvent(ActionEvent.ADSTARTINPLAYER));			}		private function onAdVideoComplete(event:ActionEvent):void{			this.gc();			adlist.pop();			this.Play();			}		private function onAdUserClose(event:ActionEvent):void{			this.gc();			adlist.pop();			this.Play();			}		private function emptyArr(arr:Array):void{			var _length:int = arr.length;			for(var m:int=0; m<_length; m++){				arr.pop();				}			}		private function analyzeUrl(path:String,identifier:String=null):*{			var arr1:Array = path.substr(path.indexOf("?")+1,path.length).split("&");			var obj:Object = new Object();			for(var m:Number=0; m<arr1.length; m++){				var arr2:Array = arr1[m].split("=");				obj[arr2[0]]=arr2[1];				}			return (identifier)?obj[identifier]:obj;			}					}	}